
jQuery(function($) {

  $("form").submit(function() { // When clickling submit button.
    $(".errors", this).empty() // If it is empty it does nothing. If there is an error there, it removes it.
    // ".errors" is a name to a class in the form. Inside that div I append the errors.  
    var element = $(".test");
    var text = $.trim(element.text())
    var html = element.html()
    $("[name=post]").val(html) // This line sends the value of the variable "test"
    // and sends it to the controller. 
    if (!text) { // If there is no content in the "test" element.
      $(".errors", this).append("<p>a post is required!</p>") //return this error.
      return false
    }
 
  }).on("keydown click", function() { //when user press any key and press submit.
    $(".errors", this).empty()
  })
  $(".test").focusout(function(){
    $(this).html(function(i,html){ //i parameter is a placeholder, and not used. I need it because I want the second parameter.
      return strip_tags(html,"<img>").replace(/&nbsp;|\uA0/g,"") // second argument is the tags that shouldn't be stripped".
      // regex gets rid of non breaking spaces that the browser may insert.
    })
  }) // This function is for cloning the icon from its location to the post update.
  $(".icons img").click(function() {
    $(".test").append($(this).clone()) //I clone the Image, so it can stay in the icons div.
    placeCaretAtEnd($(".test")[0])

  })
});
 
function placeCaretAtEnd(el) {  // The caret is a vertical bar the is almost always where I am typing.
    // The caret is the pipe blinking near the last character inserted.
 
  //This function moves it to the end.
  //http://stackoverflow.com/questions/4233265/contenteditable-set-caret-at-the-end-of-the-text-cross-browser
  el.focus();
  if (typeof window.getSelection != "undefined" && typeof document.createRange != "undefined") {
    var range = document.createRange();
    range.selectNodeContents(el);
    range.collapse(false);
    var sel = window.getSelection();
    sel.removeAllRanges();
    sel.addRange(range);
  } else if (typeof document.body.createTextRange != "undefined") {
    var textRange = document.body.createTextRange();
    textRange.moveToElementText(el);
    textRange.collapse(false);
    textRange.select();
  }
}
function strip_tags(input, allowed) {
  allowed = (((allowed || '') + '')
    .toLowerCase()
    .match(/<[a-z][a-z0-9]*>/g) || [])
    .join(''); // making sure the allowed arg is a string containing only tags in lowercase (<a><b><c>)
  var tags = /<\/?([a-z][a-z0-9]*)\b[^>]*>/gi
  return input
    .replace(tags, function($0, $1) {
      return allowed.indexOf('<' + $1.toLowerCase() + '>') > -1 ? $0 : '';
    });
}
